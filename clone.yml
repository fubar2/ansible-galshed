---

- name: Clone Galaxy
  block:

    - name: Update Galaxy to specified ref
      git:
        dest: "{{ galaxy_server_dir }}"
        force: "{{ galaxy_force_checkout }}"
        depth: "{{ galaxy_clone_depth | default(omit) }}"
        repo: "{{ galaxy_repo }}"
        version: "{{ galaxy_commit_id }}"
        executable: "{{ git_executable | default(omit) }}"
      #diff: "{{ galaxy_diff_mode_verbose }}"
      register: __galaxy_git_update_result
      notify:
        - "{{ galaxy_restart_handler_name }}"

    - name: Report Galaxy version change
      debug:
        msg: "Galaxy version changed from '{{ __galaxy_git_update_result.before }}' to '{{ __galaxy_git_update_result.after }}'"
      changed_when: __galaxy_git_update_result is changed
      when: __galaxy_git_update_result is changed

    - name: Make var
      file:
        path: "{{ galaxy_root }}/var"
        state: directory
        owner: "{{ galaxy_user }}"
        group: "{{ galaxy_user }}"
        recurse: yes

    - name: Fix permissions on repo
      file:
        path:  "{{ galaxy_server_dir }}"
        owner: "{{ galaxy_user }}"
        group: "{{ galaxy_user }}"
        recurse: yes
      when: __galaxy_git_update_result is changed

  #remote_user: "{{ galaxy_user }}"
  #become_user: "{{ galaxy_user }}"

# Having pip installed on $PYTHONPATH can break upgrading it, so we install
# once with $PYTHONPATH set (in case it's needed for virtualenv) and then once
# the venv is created we upgrade pip with $PYTHONPATH unset

- name: Create Galaxy virtualenv
  pip:
    name: pip
    virtualenv: "{{ galaxy_venv_dir }}"
    extra_args: "{{ pip_extra_args | default('') }}"
    virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
    virtualenv_python: "{{ galaxy_virtualenv_python | default(omit) }}"
  environment:
    VIRTUAL_ENV: "{{ galaxy_venv_dir }}"

- name: Ensure pip and setuptools are the latest release
  pip:
    name:
      - pip
      - setuptools
    state: latest
    extra_args: "{{ pip_extra_args | default('') }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
  environment:
      PYTHONPATH: null
      VIRTUAL_ENV: "{{ galaxy_venv_dir }}"

- name: Install Galaxy base dependencies
  pip:
    requirements: "{{ galaxy_requirements_file }}"
    extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --extra-index-url https://pypi.python.org/simple {{ pip_extra_args | default('') }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
  environment:
    PYTHONPATH: null
    VIRTUAL_ENV: "{{ galaxy_venv_dir }}"

- name: Collect Galaxy conditional dependency requirement strings
  command: "{{ galaxy_venv_dir }}/bin/python -c \"import galaxy.dependencies; print('\\n'.join(galaxy.dependencies.optional('{{ galaxy_config_file }}')))\""
  environment:
    PYTHONPATH: "{{ galaxy_server_dir }}/lib"
  register: conditional_dependencies
  changed_when: no

- name: Install Galaxy conditional dependencies
  pip:
    name: "{{ conditional_dependencies.stdout_lines }}"
    extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --extra-index-url https://pypi.python.org/simple {{ pip_extra_args | default('') }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    virtualenv_command: "{{ galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit)) }}"
  environment:
    PYTHONPATH: null
    VIRTUAL_ENV: "{{ galaxy_venv_dir }}"
  when: (not ansible_check_mode) and conditional_dependencies.stdout_lines | length > 0
